SQL> 
SQL> REM CONDITIONAL STATEMENTS :
SQL> 
SQL> REM LIST OF CONDITIONAL STATEMENTS : 1 IF 2 CASE
SQL> 
SQL> REM IF ALLOWS US TO SKIP THE WHOLD STRUCTURE.
SQL> 
SQL> REM CASE DOESN'T ALLOW US TO SKIP THE WHOLE STRUCTURE.
SQL> 
SQL> 
SQL> 
SQL> REM CONDITIONAL STATEMENTS : TO EXECUTE CERTAIN STATEMENTS IF SOME ATTACHED CONDITION(S) EVALUATES TO TRUE/FALSE.
SQL> 
SQL> 
SQL> 
SQL> REM BY DEFAULT ALL STATEMENTS OF BLOCK GETS EXECUTED FROM TOP TO BOTTOM AND LEFT TO RIGHT MANDATORILY.
SQL> 
SQL> 
SQL> BEGIN
  2    DBMS_OUTPUT.PUT_LINE('FIRST');
  3    DBMS_OUTPUT.PUT_LINE('SECOND');
  4    DBMS_OUTPUT.PUT_LINE('THIRD');
  5    DBMS_OUTPUT.PUT_LINE('FOURTH');
  6    DBMS_OUTPUT.PUT_LINE('FIFTH');
  7  END;
  8  .
SQL> 
SQL> 
SQL> SET SERVEROUT ON FORMAT WRA
SQL> 
SQL> R
  1  BEGIN
  2    DBMS_OUTPUT.PUT_LINE('FIRST');
  3    DBMS_OUTPUT.PUT_LINE('SECOND');
  4    DBMS_OUTPUT.PUT_LINE('THIRD');
  5    DBMS_OUTPUT.PUT_LINE('FOURTH');
  6    DBMS_OUTPUT.PUT_LINE('FIFTH');
  7* END;
FIRST                                                                                                                                                                                                   
SECOND                                                                                                                                                                                                  
THIRD                                                                                                                                                                                                   
FOURTH                                                                                                                                                                                                  
FIFTH                                                                                                                                                                                                   

PL/SQL procedure successfully completed.

SQL> BEGIN
  2    DBMS_OUTPUT.PUT_LINE('FIRST');
  3    DBMS_OUTPUT.PUT_LINE('SECOND');
  4    IF ...
  5     DBMS_OUTPUT.PUT_LINE('THIRD');
  6     DBMS_OUTPUT.PUT_LINE('FOURTH');
  7    END IF;
  8    DBMS_OUTPUT.PUT_LINE('FIFTH');
  9  END;
 10  .
SQL> 
SQL> 
SQL> BEGIN
  2    DBMS_OUTPUT.PUT_LINE('FIRST');
  3    DBMS_OUTPUT.PUT_LINE('SECOND');
  4    IF 10 > 5 THEN
  5      DBMS_OUTPUT.PUT_LINE('THIRD');
  6      DBMS_OUTPUT.PUT_LINE('FOURTH');
  7     END IF;
  8     DBMS_OUTPUT.PUT_LINE('FIFTH');
  9   END;
 10  /
FIRST                                                                                                                                                                                                   
SECOND                                                                                                                                                                                                  
THIRD                                                                                                                                                                                                   
FOURTH                                                                                                                                                                                                  
FIFTH                                                                                                                                                                                                   

PL/SQL procedure successfully completed.

SQL> BEGIN
  2    DBMS_OUTPUT.PUT_LINE('FIRST');
  3    DBMS_OUTPUT.PUT_LINE('SECOND');
  4    IF 10 < 5 THEN
  5      DBMS_OUTPUT.PUT_LINE('THIRD');
  6      DBMS_OUTPUT.PUT_LINE('FOURTH');
  7     END IF;
  8     DBMS_OUTPUT.PUT_LINE('FIFTH');
  9   END;
 10  /
FIRST                                                                                                                                                                                                   
SECOND                                                                                                                                                                                                  
FIFTH                                                                                                                                                                                                   

PL/SQL procedure successfully completed.

SQL> REM TYPES OF IF STATEMENT : 1 SIMPLE IF 2 IF ... ELSE  3 IF ELSIF LADDER
SQL> 
SQL> 
SQL> REM SIMPLE IF : IF WE WANT TO EXECUTE A SET OF STATEMENTS ONLY IF THE ATTACHED CONDITION EVALUATES TO TRUE.
SQL> 
SQL> REM 100 MARKS : NO NEGATIVE MARKING : 0 TO 100
SQL> 
SQL> REM ASK FOR MARKS, IF IT IS INSIDE RANGE, DISPLAY 'CORRECT INPUT'.
SQL> 
SQL> DECLARE
  2    M NUMBER(3) := &MARKS;
  3  BEGIN
  4    DBMS_OUTPUT.PUT_LINE('THIS STATEMENT EXECUTION IS MANDATORY.');
  5    IF M BETWEEN 0 AND 100 THEN
  6      DBMS_OUTPUT.PUT_LINE('CORRECT INPUT');
  7    END IF;
  8    DBMS_OUTPUT.PUT_LINE('THIS STATEMENT EXECUTION IS MANDATORY.');
  9  END;
 10  /
Enter value for marks: 78
old   2:   M NUMBER(3) := &MARKS;
new   2:   M NUMBER(3) := 78;
THIS STATEMENT EXECUTION IS MANDATORY.                                                                                                                                                                  
CORRECT INPUT                                                                                                                                                                                           
THIS STATEMENT EXECUTION IS MANDATORY.                                                                                                                                                                  

PL/SQL procedure successfully completed.

SQL> /
Enter value for marks: -6
old   2:   M NUMBER(3) := &MARKS;
new   2:   M NUMBER(3) := -6;
THIS STATEMENT EXECUTION IS MANDATORY.                                                                                                                                                                  
THIS STATEMENT EXECUTION IS MANDATORY.                                                                                                                                                                  

PL/SQL procedure successfully completed.

SQL> DECLARE
  2    T NUMBER(3,1) := &TEMP;
  3  BEGIN
  4    IF T >= -89.2 AND T <= 56.7 THEN
  5      DBMS_OUTPUT.PUT_LINE('TEMP INPUT IS CORRECT.');
  6    END IF;
  7  END;
  8  /
Enter value for temp: 44
old   2:   T NUMBER(3,1) := &TEMP;
new   2:   T NUMBER(3,1) := 44;
TEMP INPUT IS CORRECT.                                                                                                                                                                                  

PL/SQL procedure successfully completed.

SQL> /
Enter value for temp: -25
old   2:   T NUMBER(3,1) := &TEMP;
new   2:   T NUMBER(3,1) := -25;
TEMP INPUT IS CORRECT.                                                                                                                                                                                  

PL/SQL procedure successfully completed.

SQL> /
Enter value for temp: -90
old   2:   T NUMBER(3,1) := &TEMP;
new   2:   T NUMBER(3,1) := -90;

PL/SQL procedure successfully completed.

SQL> /
Enter value for temp: 58
old   2:   T NUMBER(3,1) := &TEMP;
new   2:   T NUMBER(3,1) := 58;

PL/SQL procedure successfully completed.

SQL> DECLARE
  2  N1 NUMBER;
  3  N2 NUMBER;
  4  BEGIN
  5  N1 := 20;
  6  N2 := 30;
  7  IF N2 != 0 AND (N1/N2) = TRUNC(N1/N2) THEN
  8  DBMS_OUTPUT.PUT_LINE('DIVISIBLE');
  9  END IF;
 10  END;
 11  /

PL/SQL procedure successfully completed.

SQL> DECLARE
  2  N1 NUMBER := &N1;
  3  N2 NUMBER := &N2;
  4  BEGIN
  5  IF N2 != 0 AND (N1/N2) = TRUNC(N1/N2) THEN
  6  DBMS_OUTPUT.PUT_LINE('DIVISIBLE');
  7  END IF;
  8  END;
  9  /
Enter value for n1: 30
old   2: N1 NUMBER := &N1;
new   2: N1 NUMBER := 30;
Enter value for n2: 6
old   3: N2 NUMBER := &N2;
new   3: N2 NUMBER := 6;
DIVISIBLE                                                                                                                                                                                               

PL/SQL procedure successfully completed.

SQL> /
Enter value for n1: 9.6
old   2: N1 NUMBER := &N1;
new   2: N1 NUMBER := 9.6;
Enter value for n2: 2.4
old   3: N2 NUMBER := &N2;
new   3: N2 NUMBER := 2.4;
DIVISIBLE                                                                                                                                                                                               

PL/SQL procedure successfully completed.

SQL> /
Enter value for n1: .64
old   2: N1 NUMBER := &N1;
new   2: N1 NUMBER := .64;
Enter value for n2: .08
old   3: N2 NUMBER := &N2;
new   3: N2 NUMBER := .08;
DIVISIBLE                                                                                                                                                                                               

PL/SQL procedure successfully completed.

SQL> L
  1  DECLARE
  2  N1 NUMBER := &N1;
  3  N2 NUMBER := &N2;
  4  BEGIN
  5  IF N2 != 0 AND (N1/N2) = TRUNC(N1/N2) THEN
  6  DBMS_OUTPUT.PUT_LINE('DIVISIBLE');
  7  END IF;
  8* END;
SQL> /
Enter value for n1: -72
old   2: N1 NUMBER := &N1;
new   2: N1 NUMBER := -72;
Enter value for n2: 9
old   3: N2 NUMBER := &N2;
new   3: N2 NUMBER := 9;
DIVISIBLE                                                                                                                                                                                               

PL/SQL procedure successfully completed.

SQL> DECLARE
  2  N1 NUMBER := &N1;
  3  N2 NUMBER := &N2;
  4  BEGIN
  5  IF N2 != 0 AND (N1/N2) = FLOOR(N1/N2) THEN
  6  DBMS_OUTPUT.PUT_LINE('DIVISIBLE');
  7  END IF;
  8  END;
  9  /
Enter value for n1: -72
old   2: N1 NUMBER := &N1;
new   2: N1 NUMBER := -72;
Enter value for n2: 9
old   3: N2 NUMBER := &N2;
new   3: N2 NUMBER := 9;
DIVISIBLE                                                                                                                                                                                               

PL/SQL procedure successfully completed.

SQL> /
Enter value for n1: 9.6
old   2: N1 NUMBER := &N1;
new   2: N1 NUMBER := 9.6;
Enter value for n2: 2.4
old   3: N2 NUMBER := &N2;
new   3: N2 NUMBER := 2.4;
DIVISIBLE                                                                                                                                                                                               

PL/SQL procedure successfully completed.

SQL> DECLARE
  2    DOB DATE := TO_DATE('&DOB');
  3  BEGIN
  4    IF DOB <= SYSDATE THEN
  5      DBMS_OUTPUT.PUT_LINE('CORRECT DOB.');
  6    END IF;
  7  END;
  8  /
Enter value for dob: 15-JAN-71
old   2:   DOB DATE := TO_DATE('&DOB');
new   2:   DOB DATE := TO_DATE('15-JAN-71');
CORRECT DOB.                                                                                                                                                                                            

PL/SQL procedure successfully completed.

SQL> /
Enter value for dob: 15-JAN-1971
old   2:   DOB DATE := TO_DATE('&DOB');
new   2:   DOB DATE := TO_DATE('15-JAN-1971');
CORRECT DOB.                                                                                                                                                                                            

PL/SQL procedure successfully completed.

SQL> /
Enter value for dob: 15-JAN-2071
old   2:   DOB DATE := TO_DATE('&DOB');
new   2:   DOB DATE := TO_DATE('15-JAN-2071');

PL/SQL procedure successfully completed.

SQL> REM RR : PREVIOUS 50 YEARS + CURRENT 50 YEARS
SQL> 
SQL> REM RR : 1950-1999         + 2000 TO 2049
SQL> 
SQL> REM 71 -> 1971
SQL> 
SQL> REM 05 -> 2005
SQL> 
SQL> DECLARE
  2    DOB DATE := TO_DATE('&DOB');
  3  BEGIN
  4    CASE WHEN DOB <= SYSDATE THEN
  5      DBMS_OUTPUT.PUT_LINE('CORRECT DOB.');
  6    END CASE;
  7  END;
  8  /
Enter value for dob: 15-JAN-1971
old   2:   DOB DATE := TO_DATE('&DOB');
new   2:   DOB DATE := TO_DATE('15-JAN-1971');
CORRECT DOB.                                                                                                                                                                                            

PL/SQL procedure successfully completed.

SQL> /
Enter value for dob: 15-JAN-2071
old   2:   DOB DATE := TO_DATE('&DOB');
new   2:   DOB DATE := TO_DATE('15-JAN-2071');
DECLARE
*
ERROR at line 1:
ORA-06592: CASE not found while executing CASE statement 
ORA-06512: at line 4 


SQL> DECLARE
  2    DOB DATE := TO_DATE('&DOB');
  3  BEGIN
  4    CASE WHEN DOB <= SYSDATE THEN
  5      DBMS_OUTPUT.PUT_LINE('CORRECT DOB.');
  6    ELSE
  7      NULL;
  8    END CASE;
  9  END;
 10  /
Enter value for dob: DECLARE
old   2:   DOB DATE := TO_DATE('&DOB');
new   2:   DOB DATE := TO_DATE('DECLARE');
    DBMS_OUTPUT.PUT_LINE('CORRECT DOB.');
                  *
ERROR at line 5:
ORA-01858: a non-numeric character was found where a numeric was expected 
ORA-06512: at line 2 


SQL>   DOB DATE := TO_DATE('&DOB');
SP2-0734: unknown command beginning "DOB DATE :..." - rest of line ignored.
SQL> BEGIN
  2    CASE WHEN DOB <= SYSDATE THEN
  3      DBMS_OUTPUT.PUT_LINE('CORRECT DOB.');
  4  
  5  .
SQL> 
SQL> 
SQL> DECLARE
  2    DOB DATE := TO_DATE('&DOB');
  3  BEGIN
  4    CASE WHEN DOB <= SYSDATE THEN
  5      DBMS_OUTPUT.PUT_LINE('CORRECT DOB.');
  6    ELSE
  7      NULL;
  8    END CASE;
  9  END;
 10  /
Enter value for dob: 15-JAN-2071
old   2:   DOB DATE := TO_DATE('&DOB');
new   2:   DOB DATE := TO_DATE('15-JAN-2071');

PL/SQL procedure successfully completed.

SQL> REM IF ... ELSE ... END IF;
SQL> 
SQL> REM IF condition THEN true_action ELSE false_action END IF;
SQL> 
SQL> REM 0-100 -> CORRECT INPUT  OTHERWISE : WRONG INPUT, TRY AGAIN.
SQL> 
SQL> 
SQL> DECLARE
  2    N NUMBER := &N;
  3  BEGIN
  4    IF N BETWEEN 0 AND 100 THEN
  5       DBMS_OUTPUT.PUT_LINE('CORRECT INUPT.');
  6       DBMS_OUTPUT.PUT_LINE('WELL DONE.');
  7    ELSE
  8       DBMS_OUTPUT.PUT_LINE('WRONG INUPT.');
  9       DBMS_OUTPUT.PUT_LINE('TRY AGAIN.');
 10    END IF;
 11  END;
 12  /
Enter value for n: 58
old   2:   N NUMBER := &N;
new   2:   N NUMBER := 58;
CORRECT INUPT.                                                                                                                                                                                          
WELL DONE.                                                                                                                                                                                              

PL/SQL procedure successfully completed.

SQL> /
Enter value for n: -5
old   2:   N NUMBER := &N;
new   2:   N NUMBER := -5;
WRONG INUPT.                                                                                                                                                                                            
TRY AGAIN.                                                                                                                                                                                              

PL/SQL procedure successfully completed.

SQL> /
Enter value for n: 106
old   2:   N NUMBER := &N;
new   2:   N NUMBER := 106;
WRONG INUPT.                                                                                                                                                                                            
TRY AGAIN.                                                                                                                                                                                              

PL/SQL procedure successfully completed.

SQL> ASK FOR ANY NAME : IF IT STARTS WITH CONSONENT. DISPLAY 'CONSONENT' ELSE DISPLAY 'VOWEL'.
SP2-0734: unknown command beginning "ASK FOR AN..." - rest of line ignored.
SQL> 
SQL> DECLARE
  2  NAME VARCHAR(15);
  3  BEGIN
  4  NAME := &NAME;
  5  IF SUBSTR(UPPER(NAME),1,1) IN ('A','E','I','O','U') THEN
  6  DBMS_OUTPUT.PUT_LINE('VOWEL');
  7  ELSE
  8          DBMS_OUTPUT.PUT_LINE('CONSONENT');
  9  END IF;
 10  END;
 11  /
Enter value for name: GANESH
old   4: NAME := &NAME;
new   4: NAME := GANESH;
NAME := GANESH;
        *
ERROR at line 4:
ORA-06550: line 4, column 9: 
PLS-00357: Table,View Or Sequence reference 'GANESH' not allowed in this context 
ORA-06550: line 4, column 1: 
PL/SQL: Statement ignored 


SQL> /
Enter value for name: 'GANESH'
old   4: NAME := &NAME;
new   4: NAME := 'GANESH';
CONSONENT                                                                                                                                                                                               

PL/SQL procedure successfully completed.

SQL> /
Enter value for name: ISHWAR
old   4: NAME := &NAME;
new   4: NAME := ISHWAR;
NAME := ISHWAR;
        *
ERROR at line 4:
ORA-06550: line 4, column 9: 
PLS-00201: identifier 'ISHWAR' must be declared 
ORA-06550: line 4, column 1: 
PL/SQL: Statement ignored 


SQL> /
Enter value for name: 'ISHWAR'
old   4: NAME := &NAME;
new   4: NAME := 'ISHWAR';
VOWEL                                                                                                                                                                                                   

PL/SQL procedure successfully completed.

SQL> DECLARE
  2  NAME VARCHAR(15);
  3  BEGIN
  4  NAME := '&NAME';
  5  IF SUBSTR(UPPER(NAME),1,1) IN ('A','E','I','O','U') THEN
  6  DBMS_OUTPUT.PUT_LINE('VOWEL');
  7  ELSE
  8          DBMS_OUTPUT.PUT_LINE('CONSONENT');
  9  END IF;
 10  END;
 11  /
Enter value for name: GANESH
old   4: NAME := '&NAME';
new   4: NAME := 'GANESH';
CONSONENT                                                                                                                                                                                               

PL/SQL procedure successfully completed.

SQL> /
Enter value for name: ISHWAR
old   4: NAME := '&NAME';
new   4: NAME := 'ISHWAR';
VOWEL                                                                                                                                                                                                   

PL/SQL procedure successfully completed.

SQL> DECLARE
  2  VAR VARCHAR(15);
  3  BEGIN
  4  VAR := '&VAR';
  5  IF TRANSLATE(VAR,'#123457890','#') != VAR THEN
  6  DBMS_OUTPUT.PUT_LINE('CONTAINS DIGIT');
  7  ELSE
  8          DBMS_OUTPUT.PUT_LINE('CONTAINS NO DIGIT');
  9  END IF;
 10  END;
 11  /
Enter value for var: SHRI420
old   4: VAR := '&VAR';
new   4: VAR := 'SHRI420';
CONTAINS DIGIT                                                                                                                                                                                          

PL/SQL procedure successfully completed.

SQL> /
Enter value for var: SHRI GANESH
old   4: VAR := '&VAR';
new   4: VAR := 'SHRI GANESH';
CONTAINS NO DIGIT                                                                                                                                                                                       

PL/SQL procedure successfully completed.

SQL> SPOOL OFF
