-- EXAMPLE OF INTERNAL EXCEPTION HANDLING

-- BY DEFAULT CALLING ENVIRONMENT WILL HANDLE ALL THE ERRORS.


-- PRECEDENCE OF ERROR/EXCEPTION HANDLING 
-- 1 SPECIFIC EXCEPTION OF CURRENT BLOCK
-- 2 OTHERS OF CURRENT BLOCK
-- 3 SPECIFIC EXCEPTION OF OUTER BLOCK
-- 4 OTHERS OF OUTER BLOCK
-- 5 CALLING ENVIRONMENT

-- DBMS_OUTPUT.PUT_LINE : NORMAL TERMINATION
-- RAISE OR RAISE APPLICATION ERROR : ABNORMAL TERMINATION
-- RAISE WITH EXCEPTION NAME WILL MOVE/JUMP THE EXECUTION CONTROL TO THE EXCEPTION.

-- RAISE AND RAISE_APPLICATION_ERROR WILL GIVE FIRST CHANCE OF EXECUTION TO WHEN OTHERS OF OUTER BLOCK.

/*
LIST OF ORACLE INTERNAL/PRE-DEFINED EXCEPTIONS :


INTERNAL EXCEPTION NAME 	ERROR NUMBER

ACCESS_INTO_NULL    		ORA-06530
CASE_NOT_FOUND  			ORA-06592
COLLECTION_IS_NULL  		ORA-06531
CURSOR_ALREADY_OPEN 		ORA-06511
DUP_VAL_ON_INDEX    		ORA-00001
INVALID_CURSOR  			ORA-01001
INVALID_NUMBER  			ORA-01722
LOGIN_DENIED    			ORA-01017
NO_DATA_FOUND   			ORA-01403
NOT_LOGGED_ON   			ORA-01012
PROGRAM_ERROR   			ORA-06501
ROWTYPE_MISMATCH    		ORA-06504
SELF_IS_NULL    			ORA-30625
STORAGE_ERROR   			ORA-06500
SUBSCRIPT_BEYOND_COUNT  	ORA-06533
SUBSCRIPT_OUTSIDE_LIMIT 	ORA-06532
SYS_INVALID_ROWID   		ORA-01410
TIMEOUT_ON_RESOURCE 		ORA-00051
TOO_MANY_ROWS   			ORA-01422
VALUE_ERROR 				ORA-06502
ZERO_DIVIDE 				ORA-01476
*/

BEGIN
	DBMS_OUTPUT.PUT_LINE('EXECUTION OF OUTER BLOCK STARTS HERE.'||CHR(10));
	DECLARE
		C_JOB CONSTANT MPSEMP.JOB%TYPE := '&B_JOB';
		V_ENAME MPSEMP.ENAME%TYPE;  -- SCALAR VARIABLE, IT CAN STORE SINGLE VALUE AT A TIME
		X NUMBER; Y NUMBER DEFAULT 56;
	BEGIN
		SELECT ENAME 
		INTO V_ENAME
		FROM MPSEMP
		WHERE JOB = C_JOB;
		DBMS_OUTPUT.PUT_LINE(V_ENAME || ' WORKS AS ' || C_JOB || '.'||CHR(10));
		X := Y / 0;  
		DBMS_OUTPUT.PUT_LINE('EXECUTION OF INNER BLOCK ENDS HERE.');  -- THIS STATEMENT WILL BE SKIPPED.
	EXCEPTION
/*		WHEN ZERO_DIVIDE THEN  -- ZERO_DIVIDE IS SPECIFIC PRE-DEFINED EXCEPTION
			DBMS_OUTPUT.PUT_LINE('INNER BLOCK -> UNABLE TO DIVIDE VALUE WITH ZERO.'||CHR(10));    */
		WHEN TOO_MANY_ROWS THEN
--			DBMS_OUTPUT.PUT_LINE('INNER NLOCK -> MULTIPLE ROWS FOUND FOR THE JOB.'||CHR(10));  -- NORMAL TERMINATION OF CURRENT BLOCK
	 	RAISE_APPLICATION_ERROR(-20456,'MANY ROWS WITH SAME JOB EXISTS.');  -- IF 'OTHERS' OF OUTER BLOCK EXISTS, THE ERROR WILL BE HANDLED BY IT, OTHERWISE THIS ERROR WILL BE DISPLAYED.
--		                        -20000 TO -20999 
--                              ERR MSG MAX 255 CHARACTERS
		WHEN NO_DATA_FOUND THEN	
--			DBMS_OUTPUT.PUT_LINE('INNER BLOCK -> NO SUCH JOB EXISTS IN TABLE.'||CHR(10)); 
			RAISE;  -- THE PROGRAM WILL BE ABNORMALLY TERMINATED. 
		/*WHEN OTHERS THEN
			DBMS_OUTPUT.PUT_LINE('OTHERS OF INNER BLOCK EXECUTED.'||CHR(10));  */
	END;
	DBMS_OUTPUT.PUT_LINE('EXECUTION OF OUTER BLOCK ENDS HERE.'||CHR(10));

EXCEPTION
/*	WHEN NO_DATA_FOUND THEN
		DBMS_OUTPUT.PUT_LINE('OUTER BLOCK -> NO DATA FOUND.'||CHR(10));   */
	WHEN TOO_MANY_ROWS THEN
		DBMS_OUTPUT.PUT_LINE('OUTER BLOCK -> TOO MANY ROWS.'||CHR(10)); 
	WHEN ZERO_DIVIDE THEN
		DBMS_OUTPUT.PUT_LINE('OUTER BLOCK -> UNABLE TO DIVIDE VALUE WITH ZERO.'||CHR(10));   
/*	WHEN OTHERS THEN
		DBMS_OUTPUT.PUT_LINE('OUTER BLOCK -> OTHERS EXECUTED.'||CHR(10));       */
END;
/
-- ORA-nnnnn: ERROR MESSAGE