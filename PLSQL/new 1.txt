-- DROP TABLE CT;
-- DROP TABLE PT;
-- CREATE TABLE PT (ID NUMBER PRIMARY KEY,NAME VARCHAR2(20));
-- CREATE TABLE CT (ID NUMBER,AMOUNT NUMBER,FOREIGN KEY (ID) REFERENCES PT(ID));
-- INSERT INTO PT VALUES (10, 'Steven');
-- INSERT INTO PT VALUES (20, 'Neena');
-- INSERT INTO PT VALUES (30, 'Lex');
DECLARE
    CURSOR PT_CURSOR IS SELECT * FROM PT;
    CID PT.ID%TYPE;
    CAMOUNT CT.AMOUNT%TYPE;
	P_COUNT NUMBER;
	NO_ID_FOUND EXCEPTION;
	PRAGMA EXCEPTION_INIT (NO_ID_FOUND,-20001);
BEGIN
    CID := 200;
	CAMOUNT := 8000;
	SELECT COUNT(*) INTO P_COUNT FROM PT WHERE ID = CID;
	IF P_COUNT = 0 THEN
        RAISE_APPLICATION_ERROR(-20001, 'ID NOT FOUND IN TABLE PT.');
	ELSE
        INSERT INTO CT VALUES (CID,CAMOUNT);
	END IF;
	EXCEPTION
		WHEN NO_ID_FOUND THEN
       		DBMS_OUTPUT.PUT_LINE('ID NOT FOUND IN TABLE PT.');
			DBMS_OUTPUT.PUT_LINE(RPAD(4,'ID') || '  ' || RPAD(20,'NAME') || CHR(10) || RPAD('=',26,'='));
			FOR PT_RECORD IN PT_CURSOR LOOP
				DBMS_OUTPUT.PUT_LINE(RPAD(4,PT_RECORD.ID) || '  ' || RPAD(20,PT_RECORD.NAME));
        	END LOOP;
END;
/
-- CREATE TABLE NAMED CT. ID(RK) , AMOUNT
-- REM INSERT SOME ROWS IN PT TABLE.
-- WRITE A PLSQL PROGRAM WHICH WILL ASK FOR ID AND AMOUNT, WHICH WE WILL INSERT INTO CT TABLE.
-- IF ID IS NOT FOUND IN PARENT TABLE, IT WILL RAISE SOME ERROR.
-- HANDLE ABOVE ERROR BY USING USER DEFINED EXCEPTION NAME.
-- AS RESPONSE DISPLAY ALL IDs OF PARENT TABLE, SO THAT USER WILL COME TO KNOW THE ACCEPTABLE VALUES.
