1. DISPLAY FIRST NAME AND FIRST_NAME WITH LENGTH 6 OR MORE. DISPLAY FIRST TWO CHARACTERS IN SMALL CASE, LAST TWO CHARACTERS IN CAPITAL AND ALL REMAINING CHARACTERS IN CAMEL CASE.
SELECT FIRST_NAME , LOWER(SUBSTR(FIRST_NAME,1,2))||INITCAP(SUBSTR(FIRST_NAME,3,LENGTH(FIRST_NAME)-4))||UPPER(SUBSTR(FIRST_NAME,-2)) FROM EMPLOYEES WHERE FIRST_NAME LIKE '______%';

2. DISPLAY LAST_NAME AND ANOTHER LAST_NAME COLUMN WITH ALL VOWELS IN CAPITAL AND CONSONENTS IN SMALL CASE.
SELECT LAST_NAME , TRANSLATE(LOWER(LAST_NAME),'aeiou','AEIOU') FROM EMPLOYEES;

3. DISPLAY FIRST_NAME AND ANOTHER COLUMN, IT SHOULD DISPLAY * FOR EACH CONSONENT AND + FOR EACH VOWELS.
SELECT FIRST_NAME , INITCAP(TRANSLATE(LOWER(FIRST_NAME),'qwrtypsdfghjklzxcvbnmaeiou','*********************+++++')) FROM EMPLOYEES;

4. DISPLAY EMAIL AND IDENTICAL RESULT OF EMAIL COLUMN USING FIRST_NAME AND LAST_NAME COLUMNS. (DON'T USE ||)
SELECT EMAIL , SUBSTR(FIRST_NAME,1,1)||UPPER(LAST_NAME) FROM EMPLOYEES;

5. DISPLAY FIRST_NAME AND OTHER COLUMN WHICH WILL REMOVE ALL VOWELS FROM RIGHT AND ALL CONSONENTS FROM LEFT.
SELECT FIRST_NAME , LTRIM(RTRIM(FIRST_NAME,'aeiou'),'QWERTYUIOPASDFGHJKLZXCVBNM') from employees;

6. DISPLAY FIRST_NAME AND OTHER COLUMN BY REMOVING ALL VOWELS.
SELECT FIRST_NAME , TRANSLATE(FIRST_NAME,'#aeiou','#') FROM EMPLOYEES;

7. DISPLAY LAST_NAME AND OTHER COLUMN. REPLACE i WITH ee, u WITH oo.
SELECT LAST_NAME , REPLACE(REPLACE(LAST_NAME,'i','ee'),'u','OO') FROM EMPLOYEES;

8. DISPLAY THOSE FIRST_NAME WHICH HAS ATLEAST 3 VOWELS.
SELECT FIRST_NAME FROM EMPLOYEES WHERE (LENGTH(FIRST_NAME) - LENGTH(TRANSLATE(FIRST_NAME,'#aeiouAEIOU','#'))) >= 3;

9. DISPLAY ALL FIRST_NAME AND LAST_NAME IF ANY ONE OF IT HAS 2 OR MORE VOWELS.
SELECT FIRST_NAME , LAST_NAME FROM EMPLOYEES WHERE (LENGTH(FIRST_NAME) - LENGTH(TRANSLATE(FIRST_NAME,'#aeiouAEIOU','#'))) >= 2 OR(LENGTH(LAST_NAME) - LENGTH(TRANSLATE(LAST_NAME,'#aeiouAEIOU','#'))) >= 2;

10. DISPLAY SALARY AND BONUS. BONUS IS 33.36% OF ANNUAL SALARY. DISPLAY BONUS BY TRUNCATING THE VALUE IN THOUSANDS AND ROUNDING THE VALUE IN HUNDREDS.
SELECT FIRST_NAME , SALARY , SALARY*12 ANUAL_SALARY , (SALARY*12)*0.3336 , TRUNC(ROUND((SALARY*12)*0.3336,-3),-2) ANUAL_SALARY_BONUS FROM EMPLOYEES;

11. COMPANY PAYS IN NEXT MONTH ON FIRST WEDNESDAY AFTER DATE 10. DISPLAY FIRST PAYMENT DATE.
SELECT FIRST_NAME , SALARY , HIRE_DATE , NEXT_DAY(LAST_DAY(HIRE_DATE)+11,'WED') FROM EMPLOYEES;

12. COMPANY PAYS IN NEXT MONTH ON FIRST WEDNESDAY AFTER DATE 10. DISPLAY LAST PAYMENT DATE.
SELECT FIRST_NAME , SALARY , HIRE_DATE , NEXT_DAY(LAST_DAY(ADD_MONTHS(CURRENT_DATE,-2))+11,'WED') FROM EMPLOYEES;

13. COMPANY PAYS IN NEXT MONTH ON FIRST WEDNESDAY AFTER DATE 10. DISPLAY NEXT PAYMENT DATE.
SELECT FIRST_NAME , SALARY , HIRE_DATE , NEXT_DAY(LAST_DAY(ADD_MONTHS(CURRENT_DATE,-1))+11,'WED') FROM EMPLOYEES;

14. COMPANY PAYS FORTNIGHTLY (EVERY 15 DAYS, ON 1ST OR ON 16TH.) DISPLAY FIRST PAYMENT DATE.
SELECT FIRST_NAME , SALARY , HIRE_DATE ,  ROUND(HIRE_DATE,'MON')+15 FROM EMPLOYEES;

15. DISPLAY FIRST_NAME , SALARY , BONUS , LAST 3 DIGITS OF BONUS. BONUS = ANNUAL SALARY * .4589
SELECT FIRST_NAME , SALARY , SALARY*12 ANUAL_SALARY, (SALARY*12)*0.4589 ANNUAL_SALARY_BONUS , SUBSTR(TRUNC((SALARY*12)*0.4589,0),-3) FROM EMPLOYEES;

16. DISPLAY FIRST_NAME , SALARY , NEW_TRUNC_SALARY , NEW_ROUND_SALARY AND EXTRA COLUMN, WHICH SHOULD DISPLAY EQUAL IF 3RD AND 4TH COLUUMNS HAVE SAME VALUES. (TRUNC AND ROUND SALARIES IN THOUSANDS)
SELECT FIRST_NAME , SALARY , TRUNC(SALARY,-3) NEW_TRUNC_SALARY , ROUND(SALARY,-3) NEW_ROUND_SALARY , CASE WHEN TRUNC(SALARY,-3) = ROUND(SALARY,-3) THEN TO_CHAR('EQUAL') END EXTRA_COLUMN FROM EMPLOYEES;

17. DISPLAY FIRST_NAME , SALARY , SALARY * 1.1437 (NEW SALARY) AND ONLY FRACTIONAL PART OF NEW SALARY. (DON'T USE TRUNC OR ROUND FUNCTION)
SELECT FIRST_NAME , SALARY , SUBSTR(RTRIM(SALARY*1.1437,123456789),0,LENGTH(RTRIM(SALARY*1.1437,123456789))-1) "NEW_SALARY" FROM EMPLOYEES;

18. DISPLAY FIRST_NAME , SALARY , SALARY * 1.1437 (NEW SALARY) , TRUNC NEW SALARY IN HUNDREDS (USING TRUNC FUNCTION) , TRUNC NEW SALARY IN HUNDREDS (WITHOUT USING TRUNC FUNCTION).
SELECT FIRST_NAME , SALARY , SALARY*1.1437 "NEW SALARY" , TRUNC(SALARY*1.1437,-2) N_T_S , SUBSTR(SALARY*1.1437,0,LENGTH(RTRIM(SALARY*1.1437,123456789))-3)||'00' N_S_WITHOUT_TRU8NC FROM EMPLOYEES;

19. COMPANY PAYS ON EACH THURSDAY, DISPLAY FIRST_NAME , SYSDATE , HIRE_DATE , FIRST_SALARY_DATE WITH DAY NAME.
SELECT FIRST_NAME , SYSDATE , HIRE_DATE , NEXT_DAY(HIRE_DATE,'THU') || ' ' || TO_CHAR(NEXT_DAY(HIRE_DATE,'THU'),'DAY') FIRST_SALARY_DATE FROM EMPLOYEES;

20. COMPANY PAYS ON EACH WEDNESDAY, DISPLAY LAST_NAME , HIRE_DATE , SYSDATE , LAST_SALARY_DATE.
SELECT LAST_NAME , HIRE_DATE , SYSDATE , NEXT_DAY(SYSDATE,'WED') || ' ' || TO_CHAR(NEXT_DAY(SYSDATE,'WED'),'DAY') LAST_SALARY_DATE FROM EMPLOYEES;

21. COMPANY PAYS ON LAST DATE OF EACH MONTH. DISPLAY DATE OF LAST SALARY RECIEVED.
SELECT SYSDATE , LAST_DAY(ADD_MONTHS(SYSDATE,-1)) FROM DUAL;

22. COMPANY PAYS ON LAST DATE OF EACH MONTH, DISPLAY FIRST SALARY DATE.
SELECT FIRST_NAME , HIRE_DATE , LAST_DAY(HIRE_DATE) "FIRST SALARY DATE" FROM EMPLOYEES;

23. COMPANY PAYS ON 1ST DATE OF NEXT MONTH, DISPLAY FIRST SALARY DATE.
SELECT FIRST_NAME , HIRE_DATE , LAST_DAY(HIRE_DATE)+1 "FIRST SALARY DATE" FROM EMPLOYEES;

24. COMPANY PAYS ON 1ST DATE OF NEXT MONTH, DISPLAY DATE OF LAST SALARY RECD.
SELECT FIRST_NAME , HIRE_DATE , SYSDATE , LAST_DAY(ADD_MONTHS(SYSDATE,-1))+1 "LAST SALARY DATE" FROM EMPLOYEES;

25. COMPANY PAYS ON FIRST THURSDAY OF NEXT MONTH. DISPLAY FIRST SALARY DATE WITH DAY NAME.
SELECT FIRST_NAME , SYSDATE , HIRE_DATE , NEXT_DAY(LAST_DAY(HIRE_DATE),'THU') || ' ' || TO_CHAR(NEXT_DAY(HIRE_DATE,'THU'),'DAY') FIRST_SALARY_DATE FROM EMPLOYEES;

26. COMPANY PAYS ON FIRST MONDAY OF NEXT MONTH. DISPLAY DATE OF LAST SALARY RECD.
SELECT SYSDATE , NEXT_DAY(LAST_DAY(ADD_MONTHS(SYSDATE,-2)),'MON') || ' ' || TO_CHAR(NEXT_DAY(LAST_DAY(ADD_MONTHS(SYSDATE,-2)),'MON'),'DAY') LAST_SALARY_DATE FROM DUAL;

27. COMPANY PAYS ON 7TH DATE OF NEXT MONTH, DISPLAY DATE OF LAST SALARY RECD.
SELECT SYSDATE , CASE WHEN SYSDATE - TRUNC(SYSDATE,'MON') < 8 THEN ADD_MONTHS(LAST_DAY(SYSDATE),-2)+7 ELSE ADD_MONTHS(LAST_DAY(SYSDATE),-1)+7 END LAST_SALARY_DATE FROM DUAL;

28. COMPANY PAYS ON 7TH DATE OF NEXT MONTH, DISPLAY FIRST SALARY DATE WITH DAY NAME.
SELECT FIRST_NAME , HIRE_DATE , LAST_DAY(HIRE_DATE)+7 || ' ' || TO_CHAR(LAST_DAY(HIRE_DATE)+7,'DAY') FIRST_SALARY_DATE FROM EMPLOYEES;

29. COMPANY PAYS ON SECOND WEDNESDAY OF NEXT MONTH. DISPLAY FIRST SALARY DATE WITH DAY NAME.
SELECT FIRST_NAME , HIRE_DATE , NEXT_DAY(LAST_DAY(HIRE_DATE),'WED')+7 || ' ' || TO_CHAR(NEXT_DAY(LAST_DAY(HIRE_DATE),'WED')+7,'DAY') FROM EMPLOYEES;

30. COMPANY PAYS ON THIRD TUESDAY OF NEXT MONTH, DISPLAY DATE OF LAST SALARY RECD.
SELECT SYSDATE , NEXT_DAY(TRUNC(TRUNC(SYSDATE,'MON')-1,'MON'),'TUE') + (3*7) LAST_SALARY_DATE FROM DUAL;

31. COMPANY PAYS ON LAST SATURDAY OF CURRENT MONTH. DISPLAY FIRST SALARY DATE WITH DAY NAME.
SSELECT FIRST_NAME , HIRE_DATE , NEXT_DAY(LAST_DAY(HIRE_DATE),'SAT')-7 || ' ' || TO_CHAR(NEXT_DAY(LAST_DAY(HIRE_DATE),'SAT')-7,'DAY') FIRST_SALARY_DATE FROM EMPLOYEES;

32. COMPANY PAYS ON LAST FRIDAY OF CURRENT MONTH. DISPLAY DATE OF LAST SALARY RECD WITH DAY NAME.
SELECT SYSDATE , NEXT_DAY(TRUNC(SYSDATE,'MON'),'FRI')-7 || ' ' || TO_CHAR(NEXT_DAY(TRUNC(SYSDATE,'MON'),'FRI')-7,'DAY') LAST_SALARY_DATE FROM DUAL;

33. DISPLAY FIRST_NAME , HIRE_DATE , TOTAL YEARS COMPLETED.
SELECT FIRST_NAME , SYSDATE ,HIRE_DATE , TRUNC((SYSDATE - HIRE_DATE)/365.5) TOTAL_YEARS_COMPLETED FROM EMPLOYEES;

34. DISPLAY FIRST_NAME , HIRE_DATE , TOTAL MONTHS COMPLETED.
SELECT FIRST_NAME , HIRE_DATE , TRUNC(MONTHS_BETWEEN(SYSDATE,HIRE_DATE)) MONTHS_COMPLETED FROM EMPLOYEES;

35. DISPLAY LAST_NAME , HIRE_DATE , TOTAL DAYS COMPLETED.
SELECT FIRST_NAME , HIRE_DATE , TRUNC(SYSDATE - HIRE_DATE) DAYS_COMPLETED FROM EMPLOYEES;

36. DISPLAY LAST_NAME , HIRE_DATE , TOTAL YEARS COMPLETED , EXTRA MONTHS COMPLETED.
SELECT FIRST_NAME , HIRE_DATE , TRUNC(MONTHS_BETWEEN(SYSDATE,HIRE_DATE)/12) YEARS_COMPLETED , TRUNC(MONTHS_BETWEEN(SYSDATE,HIRE_DATE) - TRUNC(MONTHS_BETWEEN(SYSDATE,HIRE_DATE)/12)*12) FROM EMPLOYEES;

37. DISPLAY LAST_NAME , HIRE_DATE , TOTAL YEARS COMPLETED , EXTRA MONTHS COMPLETED , EXTRA DAYS COMPLETED.
SELECT FIRST_NAME , HIRE_DATE , TRUNC(MONTHS_BETWEEN(SYSDATE,HIRE_DATE)/12) YEARS_COMPLETED , TRUNC(MOD(MONTHS_BETWEEN(SYSDATE, hire_date), 12)) EXTRA_MONTHS_COMPLITED , TRUNC(SYSDATE - ADD_MONTHS(HIRE_DATE,TRUNC(MONTHS_BETWEEN(SYSDATE,HIRE_DATE)))) EXTRA_DAYS_COMPLITED FROM EMPLOYEES;

38. DISPLAY LAST_NAME , HIRE_DATE , TOTAL WEEKS COMPLETED , TOTAL QUARTERS COMPLETED.
SELECT FIRST_NAME , HIRE_DATE , TRUNC((SYSDATE-HIRE_DATE)/7) TOTAL_WEEKS_COMPLETED , TRUNC(MONTHS_BETWEEN(SYSDATE,HIRE_DATE)/4) TOTAL_QUARTERS_COMPLETED FROM EMPLOYEES;

39. DISPLAY LAST_NAME , HIRE_DATE , TOTAL QUARTERS COMPLETED , EXTRA WEEKS COMPLETED.
SELECT FIRST_NAME , HIRE_DATE , MONTHS_BETWEEN(TRUNC(SYSDATE,'Q'),ADD_MONTHS(TRUNC(HIRE_DATE,'Q'),3))/3 TOTAL_QUARTERS_COMPLETED 
    						  , TRUNC(((SYSDATE - TRUNC(SYSDATE,'Q')) + (ADD_MONTHS(TRUNC(HIRE_DATE,'Q'),3) - HIRE_DATE))/7) "EXTRA WEEKS COMPLETED" 
FROM EMPLOYEES;

40. DISPLAY LAST_NAME , HIRE_DATE , TOTAL QUARTERS COMPLETED , EXTRA WEEKS COMPLETED , EXTRA DAYS COMPLETED.
SELECT FIRST_NAME , HIRE_DATE , MONTHS_BETWEEN(TRUNC(SYSDATE,'Q'),ADD_MONTHS(TRUNC(HIRE_DATE,'Q'),3))/3 TOTAL_QUARTERS_COMPLETED 
    						  , TRUNC(((SYSDATE - TRUNC(SYSDATE,'Q')) + (ADD_MONTHS(TRUNC(HIRE_DATE,'Q'),3) - HIRE_DATE))/7) "EXTRA WEEKS COMPLETED" 
    						  , TRUNC((SYSDATE - TRUNC(SYSDATE,'Q')) + (ADD_MONTHS(TRUNC(HIRE_DATE,'Q'),3) - HIRE_DATE)) - TRUNC(((SYSDATE - TRUNC(SYSDATE,'Q')) + (ADD_MONTHS(TRUNC(HIRE_DATE,'Q'),3) - HIRE_DATE))/7)*7 "EXTRA DAYS COMPLETED"
FROM EMPLOYEES;

41. COMPANY MAKE EMPLOYEE PERMANENT AFTER 3 YEARS AND 3 QUARTERS OF JOINING DATE. DISPLAY FIRST_NAME , HIRE_DATE , PERMANENT_DATE.
SELECT FIRST_NAME , HIRE_DATE , ADD_MONTHS(HIRE_DATE,(12*3)+(3*3)) PERMANENT_DATE FROM EMPLOYEES;

42. COMPANY INCREMENTS ON 1ST APRIL AFTER COMPLETION OF 2 YEARS. DISPLAY LAST_NAME , FIRST_NAME , INCREMENT_DATE.
SELECT LAST_NAME , FIRST_NAME , HIRE_DATE , ADD_MONTHS(TRUNC(ADD_MONTHS(HIRE_DATE,12*3),'YY'),3) FROM EMPLOYEES;

43. COMPANY PAYS FIRST SALARY ON 1ST DATE AFTER COMPLETION OF FIRST MONTH. DISPLAY FIRST_NAME , HIRE_DATE AND FIRST_SALARY_DATE.
SELECT FIRST_NAME , HIRE_DATE , ADD_MONTHS(LAST_DAY(HIRE_DATE)+1,1) FIRST_SALARY_DATE FROM EMPLOYEES;

44. IF HIRE DATE IS IN FIRST HALF OF MONTH, COMPANY PAYS ON NEXT MONTH'S FIRST DATE OTHER WISE NEXT TO NEXT MONTH'S FIRST DATE. DISPLAY LAST_NAME , HIRE_DATE AND FIRST_SALARY_DATE.
SELECT LAST_NAME , HIRE_DATE , ADD_MONTHS(ROUND(HIRE_DATE,'MM'),1) FIRST_SALARY_DATE FROM EMPLOYEES;

45. DISPLAY FIRST_NAME , HIRE_DATE AND NO. OF DAYS WORKED IN FIRST MONTH.
SELECT FIRST_NAME , HIRE_DATE , LAST_DAY(HIRE_DATE) - HIRE_DATE "DAYS WORKED IN FIRST MONTH" FROM EMPLOYEES;

46. COMPANY PAYS ON EACH MONTH'S 7TH DATE. DISPLAY NEXT SALARY DATE.
SELECT FIRST_NAME , HIRE_DATE , LAST_DAY(SYSDATE)+7 N_S_D FROM EMPLOYEES;

47. DISPLAY FIRST_NAME , HIRE_DATE AND DAY NO. OF HIRE QUARTER.
SELECT FIRST_NAME , HIRE_DATE , HIRE_DATE+1 - TRUNC(HIRE_DATE,'Q') "DAY NO. OF HIRE QUARTER" FROM EMPLOYEES;

48. DISPLAY LAST_NAME , HIRE_DATE AND DAY NO. OF HIRE YEAR.
SELECT LAST_NAME , HIRE_DATE , TO_CHAR(HIRE_DATE,'DDD') "DAY NO. OF HIRE YEAR" FROM EMPLOYEES;

49. DISPLAY FIRST_NAME , HIRE_DATE , NO. OF DAYS WORKED IN HIRED QUARTER AND NO. OF DAYS WORKED IN HIRE YEAR.
SELECT FIRST_NAME , HIRE_DATE , ADD_MONTHS(TRUNC(HIRE_DATE,'Q'),3) - HIRE_DATE "NO. OF DAYS WORKED IN HIRED QUARTER" , ADD_MONTHS(TRUNC(HIRE_DATE,'RRRR'),12) - HIRE_DATE "NO. OF DAYS WORKED IN HIRE YEAR" FROM EMPLOYEES;


50. COMPANY DECLARES 20% BONUS ON YEARLY SALARY. EMPLOYEE WILL GET BONUS IN PROPORTION OF NO. OF DAYS WORKED IN HIRE YEAR. DISPLAY FIRST_NAME , HIRE_DATE , NO. OF DAYS WORKED IN HIRE YEAR, SALARY AND BONUS.
SELECT FIRST_NAME , HIRE_DATE , TRUNC(ADD_MONTHS(HIRE_DATE,12),'RRRR')-HIRE_DATE "NO. OF DAYS WORKED IN HIRE YEAR" , SALARY , TRUNC((((SALARY*12)*(TRUNC(ADD_MONTHS(HIRE_DATE,12),'RRRR')-HIRE_DATE))/365)*0.2) BONUS FROM EMPLOYEES;
 