DROP TABLE D1 PURGE;
CREATE TABLE D1 AS SELECT * FROM DEPARTMENTS;
DROP TABLE R1 PURGE;
CREATE TABLE R1 AS SELECT * FROM REGIONS;

1 DELETE FROM D1 TABLE WITH DEPARTMENT_ID HIGHER THAN 60
DELETE FROM D1 WHERE DEPARTMENT_ID > 60; 

2 CHECK THE ROWS ARE DELETED OR NOT. (SELECT)
SELECT * FROM D1;

3 CREATE A SAVEPOINT NAMED SA.
SAVEPOINT SA;

4 DELETE FROM R1 TABLE WITH REGION_ID 1 AND 3
DELETE FROM R1 WHERE REGION_ID IN (1,3);

5 CHECK THE ROWS ARE DELETE OR NOT. (SELECT)
SELECT * FROM R1;

6 UNDO THE CHANGE DONE AFTER SAVEPOINT SA.
ROLLBACK TO SAVEPOINT SA;

7 CHECK THE UNDO OPERATION IN TABLE (SELECT)
SELECT * FROM R1;
SELECT * FROM D1;

8 SAVE THE REMAINING CHANGES PERMANENT IN DATABASE.
COMMITE;

9 CHECK THE DATA OF D1 TABLE (SELECT)
SELECT * FROM D1;

10 UNCOMMIT THE CHANGES OF D1 TABLE.


11 DELETE ROWS OF D1 TABLE HAVING LOCATION_ID LOWER THAN 1700.

12 SAVE THE CHANGES PERMANENTLY IN DATABASE.

13 CHECK THE DATA IN TABLE.(SELECT)

14 DELETE ALL ROWS OF D1 TABLE.

15 SAVE THE CHANGES PERMANENTLY IN DATABASE.

16 DISPLAY ALL AVAILABLE OLDER VERSIONS OF TABLE.

17 DISPLAY 1 , 2 , 3 , 4 , 5 MINUTES OLDER VERSIONS OF TABLE ONE BY ONE.

18 TAKE TABLE TO 4 MINUTE OLDER VERSION.

19 CHECK THE DATA OF TABLE.

20 TAKE TABLE TO 10 MINUTE OLDER VERSION.

21 DELETE ALL ROWS OF R1 TABLE WITH SUCH COMMAND THAT WE CAN'T GET ALL ROWS BACK.

22 DELETE ALL ROWS OF D1 TABLE WITH SUCH COMMAND THAT WE CAN'T GET ALL ROWS BACK.

23 CHECK DEFINITION OF R1 AND D1 TABLE EXISTS OR NOT.

